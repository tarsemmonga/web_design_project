# IMPORTANT: edit the private key on line 123
heat_template_version: 2014-10-16

description: > 
  It is expected that you not edit this file. Just customize the env file.

  IMPORTANT: this template is re-usable *except* for the private key, which
  would normally be loaded dynamically by the api that deploys the heat template.
  We are encoding it here directly because loading files into the template is not
  possible via the web interface. This means that the deploy key is essentially
  public to anyone who can access this template.

parameters:
    
  image_name:
    type: string
    description: Image Name (should be a recent debian)
    default: "debian"

  ssh_key_name:
    type: string
    description: OpenStack key name

  authkeys_url:
    type: string
    description: url of public keys to add to authorized_keys file (refreshes every 15 minutes)

  deploy_repository:
    type: string
    description: git repository of app to be deployed

  deploy_repository_host_key:
    type: string
    description: host key of git server

  public_net:
    type: string
    description: public network 
   
  private_net:
    type: string
    description: private network

resources:

  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: port}

  host:
    type: OS::Nova::Server
    properties:
      name: {get_param: 'OS::stack_name' }
      key_name: { get_param: ssh_key_name }
      config_drive: true
      image: { get_param: image_name }
      flavor: m1.small
      networks:
        - port: { get_resource: port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config

            hostname: $STACK_NAME
            manage_etc_hosts: true

            groups:
            - docker: [debian]

            users:
            - default

            write_files:
            - owner: root:root
              path: /etc/cron.d/refresh_keys
              permissions: '0644'
              content: |
                # refresh authorized keys every 15 minutes
                */15 * * * * root /usr/local/bin/refresh_keys.sh >/dev/null 2>&1
                # this file requires a newline on the last line

            - owner: root:root
              path: /usr/local/bin/refresh_keys.sh
              permissions: '0755'
              content: |
                #!/usr/bin/env bash
                # exit if KEYS_URL is blank
                [ -z "$AUTHKEYS_URL" ] && exit 0

                # fetch new copy of public keys
                rm -f /tmp/fetched_keys || exit 1
                touch /tmp/fetched_keys || exit 1
                chmod 0600 /tmp/fetched_keys || exit 1
                curl $KEYS_URL > /tmp/fetched_keys

                # update every authorized_keys file
                cd /home
                for fn in * ; do
                [ -e "${fn}/.ssh/authorized_keys" ] && {
                    rm -f /tmp/$$authorized_keys
                    touch /tmp/$$authorized_keys
                    chmod 0600 /tmp/$$authorized_keys
                    cat "${fn}/.ssh/authorized_keys" > /tmp/$$authorized_keys
                    cat /tmp/fetched_keys >> /tmp/$$authorized_keys
                    sort -u /tmp/$$authorized_keys > "${fn}/.ssh/authorized_keys"
                    rm -f /tmp/$$authorized_keys
                }
                rm -f /tmp/fetched_keys
                done
            - owner: root:root
              path: /root/.ssh/id_ecdsa
              permissions: '0600'
              content: |
                 -----BEGIN EC PRIVATE KEY-----
                 MHcCAQEEIJUqZFojyzHXS+EhS4IFdYCvMpZvNqUHw1xfyQ98NE9NoAoGCCqGSM49
                 AwEHoUQDQgAEKSLNCz7p523yz+YWbFcBReChQR8P15a3++zC+0Q1PwscpKy75DyX
                 7ypfgp61m/ZY6IXy8D4RthTLawBIcDDTUw==
                 -----END EC PRIVATE KEY-----
            - owner: root:root
              path: /root/.ssh/known_hosts
              permissions: '0600'
              content: "$DEPLOY_REPOSITORY_HOST_KEY"

            runcmd:
            - apt-get install -y --no-install-recommends apt-transport-https ca-certificates curl software-properties-common
            - curl -fsSL https://apt.dockerproject.org/gpg | apt-key add -
            - add-apt-repository "deb https://apt.dockerproject.org/repo/ debian-$(lsb_release -cs) main"
            - apt-get update
            - apt-get install -y python-pip docker-engine
            - pip install docker-compose --user
            - cd / && git clone $DEPLOY_REPOSITORY /code
            - cd /code && /root/.local/bin/docker-compose up -d

          params:
            $DEPLOY_REPOSITORY: {get_param: deploy_repository }
            $DEPLOY_REPOSITORY_HOST_KEY: {get_param: deploy_repository_host_key }
            $STACK_NAME: {get_param: 'OS::stack_name'}
            $AUTHKEYS_URL : {get_param: authkeys_url }
